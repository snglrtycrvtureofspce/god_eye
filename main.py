# -*- coding: utf-8 -*-
###------------------------------------------------------------------------------------------------–ë–∏–ª–∏–æ—Ç–µ–∫–∞
import io
import sys
import time
import random
import lxml
import requests
from bs4 import BeautifulSoup
import config
import logging
from contextlib import suppress
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InlineKeyboardMarkup
from aiogram.utils import executor
import re
import os
from PIL import Image, ImageFilter, ImageDraw, ImageFont, ImageOps, ImageDraw2, ImageChops
from aiogram.types import InputFile, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import pandas
import vk_api
import json
import asyncio
import sqlite3
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,MessageToDeleteNotFound)
import traceback
import nest_asyncio
import datetime, threading, time
from pyqiwip2p import QiwiP2P
from pyqiwip2p.types import QiwiCustomer, QiwiDatetime
from datetime import timedelta, date
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
import warnings
###------------------------------------------------------------------------------------------------ DB
connect = sqlite3.connect('other/GlazIntim.db')
user_intim = connect.cursor()
user_intim.execute('CREATE TABLE IF NOT EXISTS user_intim(id_tel_user INTEGER, time_register TEXT NOT NULL)')
vk_information_baby = connect.cursor()
vk_information_baby.execute('CREATE TABLE IF NOT EXISTS vk_information(id_vk_id TEXT NOT NULL, intim_photo TEXT NOT NULL, mess TEXT NOT NULL, nig_mess TEXT NOT NULL, ghost_friends TEXT NOT NULL)')
insta_information = connect.cursor()
insta_information.execute('CREATE TABLE IF NOT EXISTS insta_information(id_insta TEXT NOT NULL, intim_photo TEXT NOT NULL, mess TEXT NOT NULL, nig_mess TEXT NOT NULL, img TEXT NOT NULL)')
telega_information = connect.cursor()
telega_information.execute('CREATE TABLE IF NOT EXISTS telega_information(id_telega TEXT NOT NULL, intim_photo TEXT NOT NULL, mess TEXT NOT NULL, nig_mess TEXT NOT NULL, img TEXT NOT NULL)')
admin_panel = connect.cursor()
admin_panel.execute('CREATE TABLE IF NOT EXISTS admin_panel_info(number_code TEXT NOT NULL,token_vk_bot TEXT NOT NULL, full_price TEXT NOT NULL, vremen_price TEXT NOT NULL, number_qiwi TEXT NOT NULL, proxy_vk TEXT NOT NULL)')
###------------------------------------------------------------------------------------------------
workers = sqlite3.connect('other/worker.db')
user_workers = workers.cursor()
user_workers.execute('CREATE TABLE IF NOT EXISTS user_workers(id_user INTEGER, time_register TEXT NOT NULL, status_active INTEGER, status_worker INTEGER, worker_referal INTEGER, balanse_worker FLOAT, qiwi_rekv_worker TEXT NOT NULL)')
##-----------------------------
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=config.token)
dp = Dispatcher(bot, storage=storage)
channel_id = config.channel_id
channel_id_zalet = config.channel_id_zalet
###--------------------------------
admin_panel.execute(f"SELECT number_code, token_vk_bot, full_price, vremen_price, number_qiwi, proxy_vk FROM admin_panel_info where number_code={config.Admin_id}")
db_admin_panel = admin_panel.fetchone()
if db_admin_panel == None:
    admin_panel.execute(f"INSERT INTO admin_panel_info VALUES ({config.Admin_id}, 'create', 'by', 'ober', 'DateBase', 'sex')")
else:
    pass
user_workers.execute(f"SELECT id_user, time_register, status_active, status_worker, worker_referal FROM user_workers where id_user=1")
user_workers_panel = user_workers.fetchone()
if user_workers_panel == None:
    user_workers.execute(f"INSERT INTO user_workers VALUES (1, '—è root,–º–µ–Ω—è –Ω–µ —É–¥–∞–ª—è—Ç—å', 3, 1, 0, 0, 0)")
else:
    pass
aut = admin_panel.execute(f"SELECT number_qiwi, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
p2p = QiwiP2P(auth_key=aut)
now = datetime.datetime.now()
###------------------------------------------------------------------------------------------------ States
class Form(StatesGroup):
    vk_add = State()  # –†–∞–±–æ—Ç–∞ —Å –≤–∫
    insta_add = State()  # –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Å—Ç–æ–π
    telega_add = State()  # –†–∞–±–æ—Ç–∞ —Å —Ç–µ–ª–µ–≥–∞
    full_dostup_state = State()  # –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –æ–ø–ª–∞—Ç
    vremen_dostup_state = State()  # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    vk_token_add = State() # –ê–¥–º–∏–Ω–∫–∞
    qiwi_num_add = State()# –ê–¥–º–∏–Ω–∫–∞
    ful_adm = State()# –ê–¥–º–∏–Ω–∫–∞
    vrem_adm = State()# –ê–¥–º–∏–Ω–∫–∞
    proxy_adm = State()#–ê–¥–º–∏–Ω–∫–∞
    message_send_all = State()#–ê–¥–º–∏–Ω–∫–∞
###------------------------------------------------------------------------------------------------ Keyboards
poisk_main = KeyboardButton('üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
prof_main = KeyboardButton('üïµÔ∏è‚Äç‚ôÄÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
buy_main = KeyboardButton('üëú –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏')
otziv_main = KeyboardButton('üìö –û—Ç–∑—ã–≤—ã')
main = ReplyKeyboardMarkup(resize_keyboard=True)
main.row (poisk_main,prof_main)
main.row (buy_main,otziv_main)
###------------ key
vk_inlain = InlineKeyboardButton('‚ô¶ùó©ùóû.ùóñùó¢ùó†', callback_data='vk_button')
telegram_inlain = InlineKeyboardButton('‚ô¶ùóßùóòùóüùóòùóöùó•ùóîùó†', callback_data='telegram_button')
insta_inlain = InlineKeyboardButton('‚ô¶ùóúùó°ùó¶ùóßùóîùóöùó•ùóîùó†', callback_data='insta_button')
inline_vibor = InlineKeyboardMarkup(resize_keyboard=True)
inline_vibor.add (vk_inlain)
inline_vibor.add (telegram_inlain)
inline_vibor.add (insta_inlain)
###------------ key
prov_oplat_back = KeyboardButton('üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
prov_oplat_but = ReplyKeyboardMarkup(resize_keyboard=True)
prov_oplat_but.row (prov_oplat_back)
###------------ key
###------------ key
prov_oplat_back_main = KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
prov_oplat_but_but = ReplyKeyboardMarkup(resize_keyboard=True)
prov_oplat_but_but.row (prov_oplat_back_main)
###------------ key
back_main = KeyboardButton('üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
back_main_but = ReplyKeyboardMarkup(resize_keyboard=True)
back_main_but.add (back_main)
###------------ ADMIN
poisk_back_main = KeyboardButton('üëÅ –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å')
poisk_back_but = ReplyKeyboardMarkup(resize_keyboard=True)
poisk_back_but.add (poisk_back_main)
###------------
qiwi_admin = KeyboardButton('üëÅ QiwiP2P')
token_vk_admin = KeyboardButton('üëÅ –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫')
prox_admin = KeyboardButton('üëÅ –ü—Ä–æ–∫—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤–∫')
full_admin = KeyboardButton('üëÅ –¶–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
mai_admin = KeyboardButton('üëÅ –¶–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
sendall_admin = KeyboardButton('üì£ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π')
admin_btn = ReplyKeyboardMarkup(resize_keyboard=True)
admin_btn.add (qiwi_admin)
admin_btn.row (token_vk_admin,prox_admin)
admin_btn.row (full_admin,mai_admin)
admin_btn.add (sendall_admin)
###--------------
poisk_back_main_vk = KeyboardButton('üîç –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å')
poisk_back_but_vk = ReplyKeyboardMarkup(resize_keyboard=True)
poisk_back_but_vk.add (poisk_back_main_vk)
###--------------
###------------------------------------------------------------------------------------------------ start
async def check_status(phone, token):
    ses = requests.Session()
    ses.headers['authorization'] = 'Bearer ' + token
    parameters = {
    'rows': 4, 'operation': 'IN'
    }
    header = ses.get(f'https://edge.qiwi.com/payment-history/v2/persons/{phone}/payments', params = parameters)
    return header.json()

@dp.message_handler(commands=['start', 'menu'])
async def process_start_command(message: types.Message):
    datetime_user = date.today()
    user_intim.execute(f"SELECT id_tel_user FROM user_intim where id_tel_user={message.from_user.id}")
    db_glaz = user_intim.fetchone()
    if db_glaz == None:
        user_intim.execute(f"INSERT INTO user_intim VALUES ({message.from_user.id}, '{datetime_user}')")
    else:
        pass
    connect.commit()
    user_workers.execute(f"SELECT id_user, worker_referal FROM user_workers where id_user ={message.from_user.id}")
    db_worker = user_workers.fetchone()
    if db_worker == None:
        try:
            workers_ref = message.get_args()
            try:
                user_workers.execute(f"INSERT INTO user_workers VALUES ({message.from_user.id}, '{datetime_user}', 1, 0, '{workers_ref}', 0, 0)")
                await bot.send_message(workers_ref,f"üéâ –í—ã –∑–∞–º–∞–Ω–∏–ª–∏ –Ω–æ–≤–æ–≥–æ ü¶£ –º–∞–º–æ–Ω—Ç–∞\nü¶£ ID –º–∞–º–æ–Ω—Ç–∞: {message.from_user.id}\n–ï—Å–ª–∏ –±—É–¥—É—Ç üí∑ –∑–∞–ª–µ—Ç—ã, –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                pass
            except:
                user_workers.execute(f"UPDATE user_workers SET worker_referal = {config.Admin_id} WHERE id_user = {message.from_user.id}")
                await bot.send_message(channel_id, "üéâ –ì–æ—Å–ø–æ–¥–∏–Ω, –≤–∞–º –ø–æ–≤–µ–∑–ª–æ\nü¶£ –ú–∞–º–æ–Ω—Ç –±–µ–∑ —Ö–æ–∑—è–∏–Ω–∞ - ID:" + str({message.from_user.id}) + "\n\n–û–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é —Å—Å—ã–ª–∫—É –∏ —Ç–µ–ø–µ—Ä—å –æ–Ω –≤–∞—à.")
                pass
        except:
            user_workers.execute(f"INSERT INTO user_workers VALUES ({message.from_user.id}, '{datetime_user}', 1, 0, 0, 0, 0)")
    else:
        pass
    workers.commit()
    img = open('temp/image_interface/start_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption='''<strong>üëã –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç –ì–ª–∞–∑ –ë–æ–≥–∞ 18+!</strong>\n\nüëÅ <strong>–ë–æ—Ç</strong> –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –Ω–∞ <strong>üì± –ò–Ω—Ç–∏–º–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ üçë –§–æ—Ç–æ –∏ üé• –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã</strong> –∏–Ω—Ç–∏–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ <ins>–∑–∞–∫—Ä—ã—Ç—ã–µ</ins> –∏ <ins>–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ</ins> –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. \n\nüíé –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ <strong>–Ω–æ–≤—ã—Ö —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</strong>, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å <ins>–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</ins> –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.''', parse_mode='HTML', reply_markup=main)

@dp.message_handler(commands=['admin'], user_id=int(config.Admin_id))
async def admin(message: types.Message):
    admin_register = config.Admin_id
    admin_panel.execute(f"SELECT number_code, token_vk_bot, full_price, vremen_price, number_qiwi FROM admin_panel_info where number_code={admin_register}")
    db_admin_panel = admin_panel.fetchone()
    connect.commit()
    s = requests.Session()
    s.proxies.update({'http': str(admin_panel.execute(f"SELECT proxy_vk, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])})
    token_vk = str(admin_panel.execute(f"SELECT token_vk_bot, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])
    vk_session = vk_api.VkApi(token=token_vk, session=s)
    try:
        vk = vk_session.get_api()
        status = vk_session.method("status.get", {"user_id": 1})
        vk_checker = "üü¢ Online"
    except:
        vk_checker = "üî¥ Offline (–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ª–∏–±–æ IP-–ü—Ä–æ–∫—Å–∏)"
    img = open('temp/image_interface/admin_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'üì± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞\n\nüîë–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–∫\nü¶ä–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {vk_checker}\nü¶ä–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–ø–∏—à–∏—Ç–µ /admin\n\nüë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ –≤—Å–µ–≥–æ: {admin_panel.execute(f"SELECT COUNT( * ) FROM  user_intim").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ VK (–∂–µ–Ω—Å–∫–∏—Ö): {admin_panel.execute(f"SELECT COUNT( * ) FROM  vk_information").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ instagram: {admin_panel.execute(f"SELECT COUNT( * ) FROM  insta_information").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ telegram: {admin_panel.execute(f"SELECT COUNT( * ) FROM  telega_information").fetchone()[0]}\n\n–í –¥–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\nüëÅ–¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫\nüëÅ–¶–µ–Ω—ã –¥–æ—Å—Ç—É–ø–æ–≤\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ —Å–Ω–æ–≤–∞ –∫ –±–æ—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ /start\n', parse_mode='HTML', reply_markup=admin_btn)
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫", user_id=int(config.Admin_id))
async def process_login_vk(message: types.Message):
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫")
    await Form.vk_token_add.set()
    pass

@dp.message_handler(lambda message: message.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", user_id=int(config.Admin_id))
async def send_all_mess(message: types.Message):
    await message.answer("üëÅ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await Form.message_send_all.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ QiwiP2P", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ –∞—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Qiwi\n\n–ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å: https://qiwi.com/p2p-admin/transfers/api\n–õ–∏—Å—Ç–∞–µ—Ç–µ –≤ —Å–∞–º—ã–π –Ω–∏–∑ -> –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∫–ª—é—á–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å -> –í–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ª—é–±–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ -> –ü–æ–ª—É—á–∞–µ—Ç–µ –∫–æ–¥(–ò–º–µ–Ω–Ω–æ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π —Ä–∞–º–æ—á–∫–µ)")
    await Form.qiwi_num_add.set()
    pass

@dp.message_handler(state=Form.message_send_all)
async def message_send_all(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message_send_all'] = message.text
    info = data['message_send_all']
    parse_all_user = admin_panel.execute(f"SELECT id_tel_user FROM user_intim")
    users = parse_all_user
    for row in users:
        try:
            img = open('temp/image_interface/sendmessall.png', 'rb')
            await bot.send_photo(row[0], img, caption=info)
        except:
            pass
    await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    await state.finish()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –ü—Ä–æ–∫—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤–∫", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∫—Å—é –¥–ª—è —Ç–æ–∫–µ–Ω–∞. –û–Ω–∞ –ø–æ—Å–ª—É–∂–∏—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏\n–ù—É–∂–µ–Ω —Ç–∏–ø - HTTP\n–ü—Ä–∏–º–µ—Ä: http://176.193.164.85:53281")
    await Form.proxy_adm.set()
    pass


@dp.message_handler(lambda message: message.text == "üëÅ –¶–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    await Form.ful_adm.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –¶–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    await Form.vrem_adm.set()
    pass

@dp.message_handler(commands=['poisk'])
@dp.message_handler(lambda message: message.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def process_loop(message: types.Message):
    img = open('temp/image_interface/vibor_seti_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''<strong>üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–æ—Ü.—Å–µ—Ç—è–º :</strong>''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'''–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫\n\nüëá <ins>–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</ins>.''', parse_mode='HTML', reply_markup=inline_vibor)
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å")
async def process_loop(message: types.Message):
    img = open('temp/image_interface/vibor_seti_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''<strong>üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–æ—Ü.—Å–µ—Ç—è–º :</strong>''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'''–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫\n\nüëá <ins>–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</ins>.''', parse_mode='HTML', reply_markup=inline_vibor)
    pass

@dp.message_handler(lambda message: message.text == "üîç –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å")
async def process_loop(message: types.Message):
    img = open('temp/image_interface/vibor_seti_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''<strong>üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–æ—Ü.—Å–µ—Ç—è–º :</strong>''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'''–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫\n\nüëá <ins>–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</ins>.''', parse_mode='HTML', reply_markup=inline_vibor)
    pass

@dp.message_handler(lambda message: message.text == "üïµÔ∏è‚Äç‚ôÄÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def process_loop(message: types.Message):
    img = open('temp/image_interface/my_profile.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''<strong>üïµÔ∏è‚Äç‚ôÄÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</strong>\n\nüÜî  <ins>{message.from_user.id}</ins>\nüíº –ü–æ–¥–ø–∏—Å–∫–∞: <ins>–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</ins>\n\nüí≥ –ë–∞–ª–∞–Ω—Å: <ins>0</ins>‚ÇΩ''', parse_mode='HTML', reply_markup=prov_oplat_but_but)
    pass

@dp.message_handler(lambda message: message.text == "üìö –û—Ç–∑—ã–≤—ã")
async def process_loop(message: types.Message):
    img = open('temp/image_interface/Otziv.jpg', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''üìù –ù–∞–ø–∏—Å–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: <ins>188</ins>\nü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å: <ins>17</ins> –î–µ–∫–∞–±—Ä—è <ins>2021</ins> –ì–æ–¥–∞''', parse_mode='HTML', reply_markup=prov_oplat_but_but)
    pass

@dp.message_handler(lambda message: message.text == "üëú –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
async def process_loop(message: types.Message):
    img = open('temp/image_interface/pokypki.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''üëú –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n\nüÜî  <ins>{message.from_user.id}</ins>\nüíº –ü–æ–∫—É–ø–æ–∫: <ins>–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</ins>''', parse_mode='HTML', reply_markup=prov_oplat_but_but)
    pass

@dp.message_handler(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def process_loop(message: types.Message, state: FSMContext):
    await state.finish()
    datetime_user = date.today()
    user_intim.execute(f"SELECT id_tel_user FROM user_intim where id_tel_user={message.from_user.id}")
    db_glaz = user_intim.fetchone()
    if db_glaz == None:
        user_intim.execute(f"INSERT INTO user_intim VALUES ({message.from_user.id}, '{datetime_user}')")
    else:
        pass
    connect.commit()
    img = open('temp/image_interface/start_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''<strong>üëã –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç –ì–ª–∞–∑ –ë–æ–≥–∞ 18+!</strong>\n\nüëÅ <strong>–ë–æ—Ç</strong> –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –Ω–∞ <strong>üì± –ò–Ω—Ç–∏–º–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ üçë –§–æ—Ç–æ –∏ üé• –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã</strong> –∏–Ω—Ç–∏–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ <ins>–∑–∞–∫—Ä—ã—Ç—ã–µ</ins> –∏ <ins>–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ</ins> –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. \n\nüíé –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ <strong>–Ω–æ–≤—ã—Ö —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</strong>, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å <ins>–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</ins> –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.''',parse_mode='HTML', reply_markup=main)
    pass

@dp.message_handler(lambda message: message.text == "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def process_start_command(message: types.Message, state: FSMContext):
    datetime_user = date.today()
    await state.finish()
    user_intim.execute(f"SELECT id_tel_user FROM user_intim where id_tel_user={message.from_user.id}")
    db_glaz = user_intim.fetchone()
    if db_glaz == None:
        user_intim.execute(f"INSERT INTO user_intim VALUES ({message.from_user.id}, '{datetime_user}')")
    else:
        pass
    connect.commit()
    img = open('temp/image_interface/start_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption=f'''<strong>üëã –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç –ì–ª–∞–∑ –ë–æ–≥–∞ 18+!</strong>\n\nüëÅ <strong>–ë–æ—Ç</strong> –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –Ω–∞ <strong>üì± –ò–Ω—Ç–∏–º–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ üçë –§–æ—Ç–æ –∏ üé• –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã</strong> –∏–Ω—Ç–∏–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ <ins>–∑–∞–∫—Ä—ã—Ç—ã–µ</ins> –∏ <ins>–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ</ins> –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. \n\nüíé –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ <strong>–Ω–æ–≤—ã—Ö —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</strong>, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å <ins>–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</ins> –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.''', parse_mode='HTML', reply_markup=main)
    await state.finish()
###------------------------------------------------------------------------------------------------ Start.poling
@dp.message_handler(state=Form.vk_token_add)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vk_token_add'] = message.text
    info = data['vk_token_add']
    admin_panel.execute(f"UPDATE admin_panel_info SET token_vk_bot='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –í–ö —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=admin_btn)
    await state.finish()
    pass

@dp.message_handler(state=Form.proxy_adm)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['proxy_adm'] = message.text
    info = data['proxy_adm']
    admin_panel.execute(f"UPDATE admin_panel_info SET proxy_vk='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –ü—Ä–æ–∫—Å—è –¥–ª—è –≤–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_btn)
    await state.finish()
    pass
@dp.message_handler(state=Form.qiwi_num_add)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['qiwi_num_add'] = message.text
    info = data['qiwi_num_add']
    admin_panel.execute(f"UPDATE admin_panel_info SET number_qiwi='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –ù–æ–≤—ã–π –∞—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä Qiwi –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=admin_btn)
    await state.finish()
    pass

@dp.message_handler(state=Form.ful_adm)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ful_adm'] = message.text
    info = data['ful_adm']
    admin_panel.execute(f"UPDATE admin_panel_info SET full_price='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –¶–µ–Ω–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_btn)
    await state.finish()
    pass
@dp.message_handler(state=Form.vrem_adm)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vrem_adm'] = message.text
    await Form.next()
    info = data['vrem_adm']
    admin_panel.execute(f"UPDATE admin_panel_info SET vremen_price='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –¶–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_btn)
    await state.finish()
    pass
###------------------------------------------------------------------------------------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(state=Form.vk_add)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vk_add'] = message.text
    vk_add_chek = data['vk_add']
    if vk_add_chek.find('https://vk.com/') != -1:
        vk_add_itog = (vk_add_chek.split('https://vk.com/')[1])
    elif vk_add_chek.find('vk.com/') != -1:
        vk_add_itog = (vk_add_chek.split('vk.com/')[1])
    else:
        vk_add_itog = vk_add_chek
    poisk = await message.answer('''<strong>üíª–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä</strong>\n\nüíª –ï—Å–ª–∏ —Å–ø—É—Å—Ç—è <strong>4 —Å–µ–∫—É–Ω–¥—ã</strong> –Ω–µ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç, —Ç–æ —Ç–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π''',parse_mode='HTML', reply_markup=poisk_back_but)
    s = requests.Session()
    s.proxies.update({'http': str(admin_panel.execute(f"SELECT proxy_vk, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])})
    token_vk = str(admin_panel.execute(f"SELECT token_vk_bot, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])
    session = vk_api.VkApi(token=token_vk, session=s)
    vk = session.get_api()
    url = 'https://vk-look.com/user/' + vk_add_itog
    await state.finish()
    r = requests.get(url)
    soup = BeautifulSoup(r.content, "lxml")
    fake_photo_intim = random.randint(2, 19)
    fake_perepiska = random.randint(60, 170)
    fape_black_spisk = random.randint(4, 20)
    fake_ghost_nig = random.randint(1, 5)
    try:

        find_all3 = soup.find(class_="user-info").find_all("div")
        await poisk.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</strong>

                    <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 17%</code>

            üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(2)
        await msg.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –ü–æ–∏—Å–∫ –∏–Ω—Ç–∏–º–æ–∫ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö</strong>

                    <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 50%</code>

            üü•üü•üü•üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML')
        await asyncio.sleep(2)
        await msg.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞</strong>

                    <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 98%</code>

            üü•üü•üü•üü•üü•üü•üü•üü•üü•‚¨úÔ∏è''', parse_mode='HTML')
        await asyncio.sleep(2)
        await msg.delete()
        user_id_vk = vk_add_itog
        ###------------ key
        full_dostup_inlain = InlineKeyboardButton(config.full_one_but + ''' ''' + str(admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]) + '''‚ÇΩ''',callback_data='full_dostup')
        vremen_dostup_inlain = InlineKeyboardButton(config.vremen_two_but + ''' ''' + str(admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]) + '''‚ÇΩ''',callback_data='vremen_dostup')
        inline_pred_oplata = InlineKeyboardMarkup(resize_keyboard=True)
        inline_pred_oplata.add(full_dostup_inlain)
        inline_pred_oplata.add(vremen_dostup_inlain)
        ###------------ key
        def get_user_data(user_id: str):
            info_prof = session.method('users.get', {'user_ids': user_id, 'fields': 'sex'})
            data_info = {'sex': 0}
            data_info['sex'] = info_prof[0]['sex']
            return data_info
        try:
            user_pol = get_user_data(user_id_vk)
        except:
            try:
                token_vk = str(admin_panel.execute(
                    f"SELECT token_vk_bot, number_code FROM admin_panel_info where number_code=number_code").fetchone()[
                                   0])
                vk_session = vk_api.VkApi(token=token_vk)
                vk = vk_session.get_api()
                status = vk_session.method("status.get", {"user_id": 1})
            except:
                await bot.send_message(channel_id, "‚ÄºÔ∏è‚ÄºÔ∏è–ê–¥–º–∏–Ω –±–ª—è, –º–µ–Ω—è–π –≤–∫ —Ç–æ–∫–µ–Ω - –æ–Ω —Å–¥–æ—Ö. –î–µ–ª–∞–π –≤—Å—ë –±—ã—Å—Ç—Ä–æ–æ–æ–æ–æ–æ‚ÄºÔ∏è‚ÄºÔ∏è")
                await state.finish()
                pass

        if user_pol['sex'] == 2:
            img1 = open('temp/image_interface/slivanet_img.png', 'rb')
            await bot.send_photo(message.chat.id, img1, caption=f'''<strong>üìí –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong>\n\nüíé–ò–º—è –≤–æ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ: <strong>''' + find_all3[0].text + '''</strong>\n\nüíé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <strong>''' + find_all3[1].text + '''</strong>\n–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: <strong>12 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞.</strong>\n\n<strong>üîé –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:</strong>\nüì∑ –£–≤—ã –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! ''',parse_mode='HTML', reply_markup=poisk_back_but_vk)
        if user_pol['sex'] == 1:
            links = soup.find_all('div', attrs={'class': 'avatar js-popup-gallery-trigger'})
            for link in links:
                image_url = link.find('img').get('src', '-')
            vk_information_baby.execute(
                f"SELECT id_vk_id, intim_photo, mess, nig_mess, ghost_friends  FROM vk_information where id_vk_id='{vk_add_itog}'")
            db_glaz = vk_information_baby.fetchone()
            if db_glaz == None:
                vk_information_baby.execute(
                    f"INSERT INTO vk_information VALUES ('{vk_add_itog}', '{str(fake_photo_intim)}', '{str(fake_perepiska)}', '{str(fape_black_spisk)}', '{str(fake_ghost_nig)}')")
                img_resp = requests.get(image_url, stream=True).raw
                img_op = Image.open(img_resp)
                size = (37, 37)
                mask = Image.new('L', size, 0)
                draw = ImageDraw.Draw(mask)
                draw.ellipse((0, 0) + size, fill=255)
                im = img_op.resize(size)
                output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
                output.putalpha(mask)
                output.thumbnail(size, Image.ANTIALIAS)
                img_front_and = output
                image_random_back = random.randint(1, 5)
                image_random_photo_user = random.randint(1, 14)
                img_background = Image.open('temp/create_image_vk/' + str(image_random_back) + '.png')
                img_nudes = Image.open('temp/inst_teg_img/' + str(image_random_photo_user) + '.png')
                img_background.paste(img_front_and, (44, 75))
                img_background.paste(img_front_and, (44, 131))
                img_background.paste(img_front_and, (44, 644))
                img_background.paste(img_nudes, (91, 173))
                font = ImageFont.truetype('other/ShriftVK.otf', size=13)
                draw_text1 = ImageDraw.Draw(img_background)
                draw_text1.text((92, 77), find_all3[0].text, font=font, fill='#2C587F')
                draw_text2 = ImageDraw.Draw(img_background)
                draw_text2.text((92, 133), find_all3[0].text, font=font, fill='#2C587F')
                draw_text3 = ImageDraw.Draw(img_background)
                draw_text3.text((92, 646), find_all3[0].text, font=font, fill='#2C587F')
                img_background.save('temp/vk_image/' + vk_add_itog + 'img.png')
            else:
                pass
            connect.commit()
            img1 = open('temp/image_interface/slivnaiden_img.png', 'rb')
            await bot.send_photo(message.chat.id, img1)
            img = open('temp/vk_image/' + vk_add_itog + 'img.png', 'rb')
            await bot.send_photo(message.chat.id, img, reply_markup=back_main_but)
            await message.answer(
                f'''<strong>üìí –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong>\n\nüíé–ò–º—è –≤–æ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ: <strong>''' + find_all3[
                    0].text + '''</strong>\n\nüíé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <strong>''' + find_all3[
                    1].text + '''</strong>\n–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: <strong>12 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞.</strong>\n\n<strong>üîé –ù–∞–π–¥–µ–Ω–æ:</strong>\nüì∑ –ò–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - ‚úÖ <strong>''' + str(
                    vk_information_baby.execute(
                        f"SELECT intim_photo, id_vk_id FROM vk_information where id_vk_id='{vk_add_itog}'").fetchone()[
                        0]) + '''</strong> —à—Ç. –Ω–∞–π–¥–µ–Ω–æ! \n‚úâÔ∏è –ü–µ—Ä–µ–ø–∏—Å–æ–∫ - ‚úÖ <strong>''' + str(
                    vk_information_baby.execute(
                        f"SELECT mess, id_vk_id FROM vk_information where id_vk_id='{vk_add_itog}'").fetchone()[
                        0]) + '''</strong> —à—Ç. –Ω–∞–π–¥–µ–Ω–æ!\nüìô –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - ‚úÖ <strong>''' + str(
                    vk_information_baby.execute(
                        f"SELECT nig_mess, id_vk_id FROM vk_information where id_vk_id='{vk_add_itog}'").fetchone()[
                        0]) + '''</strong> —á–µ–ª. –Ω–∞–π–¥–µ–Ω–æ!\nüë•Ô∏è –°–∫—Ä—ã—Ç—ã–µ –¥—Ä—É–∑—å—è - ‚úÖ <strong>''' + str(
                    vk_information_baby.execute(
                        f"SELECT ghost_friends, id_vk_id FROM vk_information where id_vk_id='{vk_add_itog}'").fetchone()[
                        0]) + '''</strong> —á–µ–ª. –Ω–∞–π–¥–µ–Ω–æ!''', parse_mode='HTML')
            await message.answer(
                f'''<strong>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.</strong>\n\n–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ - <strong>–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</strong>''',
                parse_mode='HTML', reply_markup=inline_pred_oplata)
            await state.finish()
            pass
    except:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å',parse_mode='HTML', reply_markup=poisk_back_but)
        await state.finish()
        pass

@dp.message_handler(state=Form.insta_add)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['insta_add'] = message.text
    await Form.next()
    poisk = await message.answer('''<strong>üíª–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä</strong>\n\nüíª –ï—Å–ª–∏ —Å–ø—É—Å—Ç—è <strong>5 —Å–µ–∫—É–Ω–¥</strong> –Ω–µ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç, —Ç–æ —Ç–∞–∫–æ–≥–æ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π''',parse_mode='HTML', reply_markup=poisk_back_but)
    insta_add_chek = data['insta_add']
    ###------------ key
    full_dostup_inlain = InlineKeyboardButton(config.full_one_but + ''' ''' + str(admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]) + '''‚ÇΩ''',callback_data='full_dostup')
    vremen_dostup_inlain = InlineKeyboardButton(config.vremen_two_but + ''' ''' + str(admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]) + '''‚ÇΩ''',callback_data='vremen_dostup')
    inline_pred_oplata = InlineKeyboardMarkup(resize_keyboard=True)
    inline_pred_oplata.add(full_dostup_inlain)
    inline_pred_oplata.add(vremen_dostup_inlain)
    ###------------ key
    if insta_add_chek.find('http://www.instagram.com/') != -1:
        insta_add_itog = (insta_add_chek.split('http://www.instagram.com/')[1])
    elif insta_add_chek.find('https://instagram.com/') != -1:
        insta_add_itog = (insta_add_chek.split('https://instagram.com/')[1])
    elif insta_add_chek.find('www.instagram.com/') != -1:
        insta_add_itog = (insta_add_chek.split('www.instagram.com/')[1])
    elif insta_add_chek.find('instagram.com/') != -1:
        insta_add_itog = (insta_add_chek.split('instagram.com/')[1])
    else:
        insta_add_itog = insta_add_chek
    url_insta = 'https://insta-stories-viewer.com/ru/' + insta_add_itog
    await state.finish()
    rec = requests.get(url_insta)
    await asyncio.sleep(5)
    try:
        soup_date = BeautifulSoup(rec.content, "lxml")
        insta_posts = soup_date.find(class_="profile__stats").find_all("span")
        sokrat = (url_insta.split('https://insta-stories-viewer.com/ru/')[1])
        full_silka_insta = ('https://www.instagram.com/' + sokrat)
        fename = sokrat
        insta_foll = insta_posts
        insta_follw = insta_posts
        fake_photo_intim = random.randint(2, 19)
        fake_perepiska = random.randint(60, 170)
        fape_black_spisk = random.randint(4, 20)
        fake_ghost_nig = random.randint(1, 5)
        img_ran = random.randint(1, 5)
        insta_information.execute(
            f"SELECT id_insta, intim_photo, mess, nig_mess, img FROM insta_information where id_insta='{fename}'")
        db_glaz = insta_information.fetchone()
        if db_glaz == None:
            insta_information.execute(
                f"INSERT INTO insta_information VALUES ('{fename}', '{str(fake_photo_intim)}', '{str(fake_perepiska)}', '{str(fape_black_spisk)}', '{str(img_ran)}')")
            image_random_back = random.randint(1, 5)
            intim_ran = Image.open('temp/inst_teg_img/' + str(image_random_back) + '.png')
            img_background = Image.open('temp/insta_image/background_img.png')
            img_background.paste(intim_ran, (59, 184))
            font = ImageFont.truetype('other/ShriftVK.otf', size=17)
            draw_text1 = ImageDraw.Draw(img_background)
            draw_text1.text((170, 32), insta_add_itog, font=font, fill='#010101')
            draw_text2 = ImageDraw.Draw(img_background)
            font_center = ImageFont.truetype('other/ShriftVK.otf', size=30)
            boxImage = img_background.filter(ImageFilter.BoxBlur(2))
            draw_text3 = ImageDraw.Draw(boxImage)
            draw_text3.text((106, 367), config.AdressBot, font=font_center, fill='#FF0000')
            boxImage.save('temp/insta_image/' + str(sokrat) + '.png')
        else:
            pass
        connect.commit()
        await poisk.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</strong>

                        <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 17%</code>

            üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        await msg.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –ü–æ–∏—Å–∫ –∏–Ω—Ç–∏–º–æ–∫ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö</strong>

                        <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 50%</code>

            üü•üü•üü•üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML')
        await asyncio.sleep(2)
        await msg.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞</strong>

                        <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 98%</code>

            üü•üü•üü•üü•üü•üü•üü•üü•üü•‚¨úÔ∏è''', parse_mode='HTML')
        await asyncio.sleep(1)
        await msg.delete()
        img1 = open('temp/image_interface/slivnaiden_img.png', 'rb')
        await bot.send_photo(message.chat.id, img1)
        img = open('temp/insta_image/' + str(sokrat) + '.png', 'rb')
        await bot.send_photo(message.chat.id, img, reply_markup=back_main_but)
        await message.answer(
            f'''<strong>üìí –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong>\n\nüíé–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ Instagram: <strong>''' + sokrat + '''</strong>\n\nüíé <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> \n‚úâ–ê–¥—Ä–µ—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞ instagram: <strong>''' + full_silka_insta + '''</strong>\n\nüìò –ü–æ—Å—Ç—ã: <strong>''' + str(
                insta_foll[0].text) + '''</strong>\nüìï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: <strong>''' + str(
                insta_foll[1].text) + '''</strong>\nüìó –ü–æ–¥–ø–∏—Å–∫–∏: <strong>''' + str(insta_follw[
                                                                                       2].text) + '''</strong>\n\n‚è≥–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: <strong>12 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞.</strong>\n\n<strong>üîé –ù–∞–π–¥–µ–Ω–æ:</strong>\nüì∑ –ò–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - ‚úÖ <strong>''' + str(
                insta_information.execute(
                    f"SELECT intim_photo, id_insta FROM insta_information where id_insta='{fename}'").fetchone()[
                    0]) + '''</strong> —à—Ç. –Ω–∞–π–¥–µ–Ω–æ! \n‚úâÔ∏è –ü–µ—Ä–µ–ø–∏—Å–æ–∫ - ‚úÖ <strong>''' + str(insta_information.execute(
                f"SELECT mess, id_insta FROM insta_information where id_insta='{fename}'").fetchone()[
                                                                                             0]) + '''</strong> —à—Ç. –Ω–∞–π–¥–µ–Ω–æ!\nüóÉ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - ‚úÖ <strong>''' + str(
                insta_information.execute(
                    f"SELECT nig_mess, id_insta FROM insta_information where id_insta='{fename}'").fetchone()[
                    0]) + '''</strong> —á–µ–ª. –Ω–∞–π–¥–µ–Ω–æ!''', parse_mode='HTML')
        await message.answer(
            f'''<strong>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.</strong>\n\n–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ - <strong>–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</strong>''',
            parse_mode='HTML', reply_markup=inline_pred_oplata)
        await state.finish()
    except:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å',
                             parse_mode='HTML', reply_markup=poisk_back_but)
        await state.finish()
        pass

@dp.message_handler(state=Form.telega_add)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['telega_add'] = message.text
    await Form.next()
    poisk = await message.answer('''<strong>üíª–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä</strong>\n\nüíª –ï—Å–ª–∏ —Å–ø—É—Å—Ç—è <strong>4 —Å–µ–∫—É–Ω–¥—ã</strong> –Ω–µ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç, —Ç–æ —Ç–∞–∫–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π''',parse_mode='HTML', reply_markup=poisk_back_but)
    telega_add_chek = data['telega_add']
    if telega_add_chek.find('@') != -1:
        telega_add_itog = (telega_add_chek.split('@')[1])
    elif telega_add_chek.find('https://t.me/') != -1:
        telega_add_itog = (telega_add_chek.split('https://t.me/')[1])
    elif telega_add_chek.find('www.instagram.com/') != -1:
        telega_add_itog = (telega_add_chek.split('www.instagram.com/')[1])
    else:
        telega_add_itog = telega_add_chek
    url = 'https://t.me/' + telega_add_itog
    await state.finish()
    full_dostup_inlain = InlineKeyboardButton(config.full_one_but + ''' ''' + str(admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]) + '''‚ÇΩ''',callback_data='full_dostup')
    vremen_dostup_inlain = InlineKeyboardButton(config.vremen_two_but + ''' ''' + str(admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]) + '''‚ÇΩ''',callback_data='vremen_dostup')
    inline_pred_oplata = InlineKeyboardMarkup(resize_keyboard=True)
    inline_pred_oplata.add(full_dostup_inlain)
    inline_pred_oplata.add(vremen_dostup_inlain)
    ###------------ key
    r = requests.get(url)
    try:
        soup = BeautifulSoup(r.content, "lxml")
        teleg_all1_name = soup.find(class_="tgme_page_title").find_all("span")
        teleg_all2_status = soup.find(class_="tgme_page").find_all("div")
        fake_photo_intim = random.randint(2, 19)
        fake_perepiska = random.randint(60, 170)
        fape_black_spisk = random.randint(4, 20)
        fake_ghost_nig = random.randint(1, 5)
        img_ran = random.randint(1, 14)
        telega_information.execute(
            f"SELECT id_telega, intim_photo, mess, nig_mess FROM telega_information where id_telega='{telega_add_itog}'")
        db_glaz = telega_information.fetchone()
        if db_glaz == None:
            telega_information.execute(
                f"INSERT INTO telega_information VALUES ('{telega_add_itog}', '{str(fake_photo_intim)}', '{str(fake_perepiska)}', '{str(fape_black_spisk)}', '{str(img_ran)}')")
        else:
            pass
        connect.commit()
        await poisk.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</strong>

                        <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 17%</code>

            üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(2)
        await msg.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –ü–æ–∏—Å–∫ –∏–Ω—Ç–∏–º–æ–∫ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö</strong>

                        <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 50%</code>

            üü•üü•üü•üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML')

        await asyncio.sleep(2)
        await msg.delete()
        msg = await message.answer(f'''<strong>‚òëÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞</strong>

                        <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 98%</code>

            üü•üü•üü•üü•üü•üü•üü•üü•üü•‚¨úÔ∏è''', parse_mode='HTML')
        await asyncio.sleep(1)
        await msg.delete()
        img1 = open('temp/image_interface/slivnaiden_img.png', 'rb')
        await bot.send_photo(message.chat.id, img1)
        img = open('temp/inst_teg_img/' + str(telega_information.execute(
            f"SELECT img, id_telega FROM telega_information where id_telega='{telega_add_itog}'").fetchone()[
                                                  0]) + '.png', 'rb')
        await bot.send_photo(message.chat.id, img, reply_markup=back_main_but)
        await message.answer(f'''<strong>üìí –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong>\n\nüíé –ò–º—è –≤ Telegram: <strong>''' + str(
            teleg_all1_name[
                0].text) + '''</strong>\n\nüíé <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> \n‚úâ–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –≤ telegram: <strong>''' + str(
            teleg_all2_status[
                3].text) + '''</strong>\n\n‚è≥–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: <strong>12 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞.</strong>\n\n<strong>üîé –ù–∞–π–¥–µ–Ω–æ:</strong>\nüì∑ –ò–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - ‚úÖ <strong>''' + str(
            telega_information.execute(
                f"SELECT intim_photo, id_telega FROM telega_information where id_telega='{telega_add_itog}'").fetchone()[
                0]) + '''</strong> —à—Ç. –Ω–∞–π–¥–µ–Ω–æ! \n‚úâÔ∏è –ü–µ—Ä–µ–ø–∏—Å–æ–∫ - ‚úÖ <strong>''' + str(telega_information.execute(
            f"SELECT mess, id_telega FROM telega_information where id_telega='{telega_add_itog}'").fetchone()[
                                                                                         0]) + '''</strong> —à—Ç. –Ω–∞–π–¥–µ–Ω–æ!\nüìô –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - ‚úÖ <strong>''' + str(
            telega_information.execute(
                f"SELECT nig_mess, id_telega FROM telega_information where id_telega='{telega_add_itog}'").fetchone()[
                0]) + '''</strong> —á–µ–ª. –Ω–∞–π–¥–µ–Ω–æ!''', parse_mode='HTML')
        await message.answer(
            f'''<strong>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.</strong>\n\n–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ - <strong>–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</strong>''',
            parse_mode='HTML', reply_markup=inline_pred_oplata)
        await state.finish()

    except:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å',
                             parse_mode='HTML', reply_markup=poisk_back_but)
        await state.finish()
        pass

###------------------------------------------------------------------------------------------------ Callback

@dp.callback_query_handler(text='vk_button')
async def process_callback_button_vk(callback_query: types.CallbackQuery):

    img = open('temp/image_interface/vk_poisk_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'üëÅ‚Äçüó® –£–∫–∞–∂–∏—Ç–µ id –∏–ª–∏ –∞–¥—Ä–µ—Å –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ\n\nüåê –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∫ —Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞:\n\n‚îå https://vk.com/id153162173\n‚îú vk.com/id153162173\n‚îú id153162173\n‚îî sharishaxd')
    await Form.vk_add.set()

@dp.callback_query_handler(text='telegram_button')
async def process_callback_button_tg(callback_query: types.CallbackQuery):

    img = open('temp/image_interface/telegram_poisk_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'üëÅ‚Äçüó® –£–∫–∞–∂–∏—Ç–µ id –∏–ª–∏ –∞–¥—Ä–µ—Å —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞\n\nüåê –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º —Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞:\n\n‚îå https://t.me/Le_li_ck\n‚îú @Le_li_ck\n‚îî Le_li_ck')
    await Form.telega_add.set()

@dp.callback_query_handler(text='insta_button')
async def process_callback_button1(callback_query: types.CallbackQuery):

    img = open('temp/image_interface/inst_poisk_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'üëÅ‚Äçüó® –£–∫–∞–∂–∏—Ç–µ id –∏–ª–∏ –∞–¥—Ä–µ—Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞\n\nüåê –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º —Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞:\n\n‚îå buzova86\n‚îú http://www.instagram.com/buzova86\n‚îú https://instagram.com/buzova86\n‚îú www.instagram.com/buzova86\n‚îî instagram.com/buzova86')
    await Form.insta_add.set()

@dp.callback_query_handler(text='full_dostup')
async def process_callback_button1(callback_query: types.CallbackQuery):
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∞ –ø–æ –Ω–∏–∫—É QIWI", callback_data='nick_oplata_full')
    qiwi_p2p_but2 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É QIWI", callback_data='nab_opala_full')
    qiwi_p2p_but3 = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data='cart_oplata_full')
    qiwi_p2p = InlineKeyboardMarkup(resize_keyboard=True)
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but2)
    qiwi_p2p.add(qiwi_p2p_but3)
    img = open('temp/image_interface/oplata_bleat_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img, caption='–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã', reply_markup=qiwi_p2p)


@dp.callback_query_handler(text='vremen_dostup')
async def process_callback_button(callback_query: types.CallbackQuery):
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∞ –ø–æ –Ω–∏–∫—É QIWI", callback_data='nick_oplata_vrem')
    qiwi_p2p_but2 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É QIWI", callback_data='nab_opala_vrem')
    qiwi_p2p_but3 = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data='cart_oplata_vremen')
    qiwi_p2p = InlineKeyboardMarkup(resize_keyboard=True)
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but2)
    qiwi_p2p.add(qiwi_p2p_but3)
    img = open('temp/image_interface/oplata_bleat_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img, caption= '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã',reply_markup=qiwi_p2p)


###------------------------------------------------------------------------------------------------ –û–ø–ª–∞—Ç–∞
@dp.message_handler(state=Form.full_dostup_state)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['full_dostup_state'] = message.text
    await Form.next()
    await state.finish()
    msg = await message.answer(f'''<strong>üíé –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∫–∏–≤–∏ üíé</strong>

                <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 63%</code>

    üü•üü•üü•üü•üü•üü•‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è''', parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(2)
    await msg.delete()
    msg = await message.answer(f'''<strong>üíé –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∫–∏–≤–∏ üíé</strong>

                <code>‚è≥ –ó–ê–ì–†–£–ó–ö–ê 99%</code>

    üü•üü•üü•üü•üü•üü•üü•üü•üü•‚¨úÔ∏è''', parse_mode='HTML')
    await asyncio.sleep(2)
    await msg.delete()
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    await bot.send_photo(message.chat.id, img1)
    await message.answer(f'''<strong>üíé –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∫–∏–≤–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ </strong>''', parse_mode='HTML', reply_markup=prov_oplat_but)
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    link_oplata = 'https://qiwi.com/payment/form/99?comment='+randomber+'&extra%5B%27account%27%5D=%2B'+config.qiwi_number+'&currency=643&amountInteger='+price+'&amountFraction=0&blocked%5B0%5D=account&blocked%5B1%5D=comment'
    link_oplata_app = "https://franchise.five.codes/qiwi?account="+config.qiwi_number+"&comment="+randomber+""
    qiwi_p2p: InlineKeyboardMarkup = types.InlineKeyboardMarkup()
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link_oplata)
    qiwi_p2p_but2 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ QIWI", url=link_oplata_app)
    qiwi_p2p_but3 = types.InlineKeyboardButton("üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", callback_data = f'check_payment_full_{randomber}')
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but2)
    qiwi_p2p.add(qiwi_p2p_but3)
    await state.finish()
    await message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\nü•ù –ù–æ–º–µ—Ä –∫–∏–≤–∏: <code>''' + str(config.qiwi_number) + '''</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>'''+str(randomber)+'''</code>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''',parse_mode='HTML', reply_markup=qiwi_p2p)



@dp.callback_query_handler(text='nab_opala_vrem')
async def process_name(callback_query: types.CallbackQuery, state: FSMContext):
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img1, reply_markup=prov_oplat_but)
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    global randomober
    parse = admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    link_oplata = 'https://qiwi.com/payment/form/99?comment='+randomber+'&extra%5B%27account%27%5D=%2B'+config.qiwi_number+'&currency=643&amountInteger='+price+'&amountFraction=0&blocked%5B0%5D=account&blocked%5B1%5D=comment'
    link_oplata_app = "https://franchise.five.codes/qiwi?account="+config.qiwi_number+"&comment="+randomber+""
    qiwi_p2p: InlineKeyboardMarkup = types.InlineKeyboardMarkup()
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link_oplata)
    qiwi_p2p_but2 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ QIWI", url=link_oplata_app)
    qiwi_p2p_but3 = types.InlineKeyboardButton("üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", callback_data = f'check_payment_vremen_{randomber}')
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but2)
    qiwi_p2p.add(qiwi_p2p_but3)
    await state.finish()
    await callback_query.message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\nü•ù –ù–æ–º–µ—Ä –∫–∏–≤–∏: <code>''' + str(config.qiwi_number) + '''</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>'''+str(randomber)+'''</code>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''',parse_mode='HTML', reply_markup=qiwi_p2p)

@dp.callback_query_handler(text='nick_oplata_vrem')
async def process_name(callback_query: types.CallbackQuery, state: FSMContext):
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img1, reply_markup=prov_oplat_but)
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    global randomober
    parse = admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    link_oplata = f"https://qiwi.com/payment/form/99999?extra%5B%27account%27%5D="+config.nickname_qiwi+"&amountInteger="+price+"&amountFraction=0&extra%5B%27comment%27%5D="+randomber+"&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"
    qiwi_p2p: InlineKeyboardMarkup = types.InlineKeyboardMarkup()
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link_oplata)
    qiwi_p2p_but3 = types.InlineKeyboardButton("üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", callback_data = f'check_payment_vremen_{randomber}')
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but3)
    await state.finish()
    await callback_query.message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\nü•ù –ù–∏–∫ –∫–∏–≤–∏: <code>''' + str(config.nickname_qiwi) + '''</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>'''+str(randomber)+'''</code>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''',parse_mode='HTML', reply_markup=qiwi_p2p)

@dp.callback_query_handler(text_contains='check_payment_full_')
async def menu(call: types.CallbackQuery):
    code = call.data[19:]
    id_tel_user = call.from_user.id
    result_pay = False
    parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    try:
        qiwi_history = await check_status(config.qiwi_number, config.token_qiwi)
        for i in range(4):
            if qiwi_history['data'][i]['comment'] == str(code) and qiwi_history['data'][i]['sum']['amount'] == int(price):
                result_pay = True
                await call.message.edit_text(f'üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ\n\n‚úÖ –°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!\n\nüë®‚Äçüíª –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n\nüëÅ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, —Ç–æ –æ—Ç–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
                await bot.send_message(call.from_user.id, '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
                doc = open('other/Imtimki' + '.rar', 'rb')
                await call.message.answer_document(doc)
                parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
                price = parse
                dolya = ((int(price) * int(config.prosent_work)) / 100)
                plata_worker = float(dolya)
                worker_ref = user_workers.execute(f"SELECT worker_referal, id_user FROM user_workers where id_user={id_tel_user}").fetchone()[0]
                user_workers.execute(f"UPDATE user_workers SET balanse_worker = balanse_worker + {plata_worker} WHERE id_user={worker_ref}")
                workers.commit()
                await bot.send_message(worker_ref,f"‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –º–∞–º–æ–Ω—Ç–∞\nüí∞–í–∞—à–∞ –¥–æ–ª—è: {dolya} —Ä—É–±–ª–µ–π.\nü¶£ID –º–∞–º–æ–Ω—Ç–∞: {call.from_user.id}\nüí≥–î–µ–Ω—å–≥–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–º–æ–∂–µ—Ç–µ –≤ –±–æ—Ç–µ —Ç–∏–º—ã")
                await bot.send_message(channel_id_zalet,"üßû‚Äç‚ôÇÔ∏è –í–æ—Ä–∫–µ—Ä: " + str(worker_ref) + " –∑–∞–Ω–µ—Å –Ω–∞–º –±–∞–±–∫–∏\nüí∞C—É–º–º–∞ –∑–∞–ª–µ—Ç–∞: " + str(price) + " —Ä—É–±–ª–µ–π\nüí∞–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞ " + str(plata_worker) + "")
        if not result_pay:
            await bot.send_message(call.from_user.id, '‚ùå –ù–µ –±—ã–ª–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!')
    except Exception as error:
        print(error)

@dp.callback_query_handler(text_contains='check_payment_vremen_')
async def menu(call: types.CallbackQuery):
    code = call.data[21:]
    id_tel_user = call.from_user.id
    result_pay = False
    parse = admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    try:
        qiwi_history = await check_status(config.qiwi_number, config.token_qiwi)
        for i in range(4):
            if qiwi_history['data'][i]['comment'] == str(code) and qiwi_history['data'][i]['sum']['amount'] == int(price):
                result_pay = True
                await call.message.edit_text(f'üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ\n\n‚úÖ –°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!\n\nüë®‚Äçüíª –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n\nüëÅ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, —Ç–æ –æ—Ç–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
                await bot.send_message(call.from_user.id, '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
                doc = open('other/Imtimki' + '.rar', 'rb')
                await call.message.answer_document(doc)
                parse = admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
                price = parse
                dolya = ((int(price) * int(config.prosent_work)) / 100)
                plata_worker = float(dolya)
                worker_ref = user_workers.execute(f"SELECT worker_referal, id_user FROM user_workers where id_user={id_tel_user}").fetchone()[0]
                user_workers.execute(f"UPDATE user_workers SET balanse_worker = balanse_worker + {plata_worker} WHERE id_user={worker_ref}")
                workers.commit()
                await bot.send_message(worker_ref,f"‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –º–∞–º–æ–Ω—Ç–∞\nüí∞–í–∞—à–∞ –¥–æ–ª—è: {dolya} —Ä—É–±–ª–µ–π.\nü¶£ID –º–∞–º–æ–Ω—Ç–∞: {call.from_user.id}\nüí≥–î–µ–Ω—å–≥–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–º–æ–∂–µ—Ç–µ –≤ –±–æ—Ç–µ —Ç–∏–º—ã")
                await bot.send_message(channel_id_zalet,"üßû‚Äç‚ôÇÔ∏è –í–æ—Ä–∫–µ—Ä: " + str(worker_ref) + " –∑–∞–Ω–µ—Å –Ω–∞–º –±–∞–±–∫–∏\nüí∞C—É–º–º–∞ –∑–∞–ª–µ—Ç–∞: " + str(price) + " —Ä—É–±–ª–µ–π\nüí∞–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞ " + str(plata_worker) + "")
        if not result_pay:
            await bot.send_message(call.from_user.id, '‚ùå –ù–µ –±—ã–ª–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!')
    except Exception as error:
        print(error)

##===============================
@dp.callback_query_handler(text='cart_oplata_vremen')
async def process_name(callback_query: types.CallbackQuery):
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    global bill
    parse = admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    lifetime = 5
    comment = randomber
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)
    link_oplata = bill.pay_url
    warnings.filterwarnings("ignore")
    qiwi_p2p = types.InlineKeyboardMarkup()
    qiwi_p2p_but = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å –∫–∞—Ä—Ç—ã", url=link_oplata)
    qiwi_p2p_but2 = types.InlineKeyboardButton("üíª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='prov_oplat_p2p_vremen')
    qiwi_p2p.add(qiwi_p2p_but)
    qiwi_p2p.add(qiwi_p2p_but2)
    id_tel_user = callback_query.from_user.id
    await callback_query.message.answer_photo(photo=img1, caption='üíé –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',reply_markup=prov_oplat_but)
    await callback_query.message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\n‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: <code>'''+str(lifetime)+'''</code> –º–∏–Ω—É—Ç—ã\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''', parse_mode='HTML', reply_markup=qiwi_p2p)

@dp.callback_query_handler(text = 'prov_oplat_p2p_vremen')
async def functionoplata(call: types.CallbackQuery):
    warnings.filterwarnings("ignore")
    id_tel_user = call.from_user.id
    status = p2p.check(bill_id=bill.bill_id).status
    if status == 'PAID':
        await call.message.edit_text(f'üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ\n\n‚úÖ –°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!\n\nüë®‚Äçüíª –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n\nüëÅ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, —Ç–æ –æ—Ç–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
        doc = open('other/Imtimki' + '.rar', 'rb')
        await call.message.answer_document(doc)
        parse = admin_panel.execute(f"SELECT vremen_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
        price = parse
        dolya = ((int(price) * int(config.prosent_work)) / 100)
        plata_worker = float(dolya)
        worker_ref = user_workers.execute(f"SELECT worker_referal, id_user FROM user_workers where id_user={id_tel_user}").fetchone()[0]
        user_workers.execute(f"UPDATE user_workers SET balanse_worker = balanse_worker + {plata_worker} WHERE id_user={worker_ref}")
        workers.commit()
        await bot.send_message(worker_ref,f"‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –º–∞–º–æ–Ω—Ç–∞\nüí∞–í–∞—à–∞ –¥–æ–ª—è: {dolya} —Ä—É–±–ª–µ–π.\nü¶£ID –º–∞–º–æ–Ω—Ç–∞: {call.from_user.id}\nüí≥–î–µ–Ω—å–≥–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–º–æ–∂–µ—Ç–µ –≤ –±–æ—Ç–µ —Ç–∏–º—ã")
        await bot.send_message(channel_id_zalet,"üßû‚Äç‚ôÇÔ∏è –í–æ—Ä–∫–µ—Ä: " + str(worker_ref) + " –∑–∞–Ω–µ—Å –Ω–∞–º –±–∞–±–∫–∏\nüí∞C—É–º–º–∞ –∑–∞–ª–µ—Ç–∞: " + str(price) + " —Ä—É–±–ª–µ–π\nüí∞–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞ " + str(plata_worker) + "")
    else:
        await bot.send_message(call.from_user.id, '‚ùé –ù–µ –±—ã–ª–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!')

##===============================
@dp.callback_query_handler(text='nab_opala_full')
async def process_name(callback_query: types.CallbackQuery, state: FSMContext):
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img1, reply_markup=prov_oplat_but)
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    global randomober
    parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    link_oplata = 'https://qiwi.com/payment/form/99?comment='+randomber+'&extra%5B%27account%27%5D=%2B'+config.qiwi_number+'&currency=643&amountInteger='+price+'&amountFraction=0&blocked%5B0%5D=account&blocked%5B1%5D=comment'
    link_oplata_app = "https://franchise.five.codes/qiwi?account="+config.qiwi_number+"&comment="+randomber+""
    qiwi_p2p: InlineKeyboardMarkup = types.InlineKeyboardMarkup()
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link_oplata)
    qiwi_p2p_but2 = types.InlineKeyboardButton("ü•ù –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ QIWI", url=link_oplata_app)
    qiwi_p2p_but3 = types.InlineKeyboardButton("üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", callback_data = f'check_payment_full_{randomber}')
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but2)
    qiwi_p2p.add(qiwi_p2p_but3)
    await state.finish()
    await callback_query.message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\nü•ù –ù–æ–º–µ—Ä –∫–∏–≤–∏: <code>''' + str(config.qiwi_number) + '''</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>'''+str(randomber)+'''</code>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''',parse_mode='HTML', reply_markup=qiwi_p2p)

@dp.callback_query_handler(text='nick_oplata_full')
async def process_name(callback_query: types.CallbackQuery, state: FSMContext):
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    await callback_query.message.answer_photo(photo=img1, reply_markup=prov_oplat_but)
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    global randomober
    parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    link_oplata = f"https://qiwi.com/payment/form/99999?extra%5B%27account%27%5D="+config.nickname_qiwi+"&amountInteger="+price+"&amountFraction=0&extra%5B%27comment%27%5D="+randomber+"&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"
    qiwi_p2p: InlineKeyboardMarkup = types.InlineKeyboardMarkup()
    qiwi_p2p_but1 = types.InlineKeyboardButton("ü•ù –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link_oplata)
    qiwi_p2p_but3 = types.InlineKeyboardButton("üåÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", callback_data = f'check_payment_full_{randomber}')
    qiwi_p2p.add(qiwi_p2p_but1)
    qiwi_p2p.add(qiwi_p2p_but3)
    await state.finish()
    await callback_query.message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\nü•ù –ù–∏–∫ –∫–∏–≤–∏: <code>''' + str(config.nickname_qiwi) + '''</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>'''+str(randomber)+'''</code>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''',parse_mode='HTML', reply_markup=qiwi_p2p)

@dp.callback_query_handler(text='cart_oplata_full')
async def process_name(callback_query: types.CallbackQuery):
    img1 = open('temp/image_interface/oplata_pomoj_img.png', 'rb')
    randomber = ''
    for x in range(12):
        randomber = randomber + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    global bill
    parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
    price = parse
    lifetime = 5
    comment = randomber
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)
    link_oplata = bill.pay_url
    warnings.filterwarnings("ignore")
    qiwi_p2p = types.InlineKeyboardMarkup()
    qiwi_p2p_but = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å –∫–∞—Ä—Ç—ã", url=link_oplata)
    qiwi_p2p_but2 = types.InlineKeyboardButton("üíª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='prov_oplat_p2p_full')
    qiwi_p2p.add(qiwi_p2p_but)
    qiwi_p2p.add(qiwi_p2p_but2)
    id_tel_user = callback_query.from_user.id
    await callback_query.message.answer_photo(photo=img1, caption='üíé –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',reply_markup=prov_oplat_but)
    await callback_query.message.answer(f'''<strong>üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</strong>\n\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>''' + str(parse) + '''</code> —Ä—É–±\n‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: <code>'''+str(lifetime)+'''</code> –º–∏–Ω—É—Ç—ã\n\nü§ñ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –∏–Ω—Ç–∏–º-—Ñ–æ—Ç–æ''', parse_mode='HTML', reply_markup=qiwi_p2p)

@dp.callback_query_handler(text = 'prov_oplat_p2p_full')
async def functionoplata(call: types.CallbackQuery):
    warnings.filterwarnings("ignore")
    id_tel_user = call.from_user.id
    status = p2p.check(bill_id=bill.bill_id).status
    if status == 'PAID':
        await call.message.edit_text(f'üìí –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ\n\n‚úÖ –°—á–µ—Ç –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!\n\nüë®‚Äçüíª –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n\nüëÅ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, —Ç–æ –æ—Ç–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
        doc = open('other/Imtimki' + '.rar', 'rb')
        await call.message.answer_document(doc)
        parse = admin_panel.execute(f"SELECT full_price, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0]
        price = parse
        dolya = ((int(price) * int(config.prosent_work)) / 100)
        plata_worker = float(dolya)
        worker_ref = user_workers.execute(f"SELECT worker_referal, id_user FROM user_workers where id_user={id_tel_user}").fetchone()[0]
        user_workers.execute(f"UPDATE user_workers SET balanse_worker = balanse_worker + {plata_worker} WHERE id_user={worker_ref}")
        workers.commit()
        await bot.send_message(worker_ref,f"‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –º–∞–º–æ–Ω—Ç–∞\nüí∞–í–∞—à–∞ –¥–æ–ª—è: {dolya} —Ä—É–±–ª–µ–π.\nü¶£ID –º–∞–º–æ–Ω—Ç–∞: {call.from_user.id}\nüí≥–î–µ–Ω—å–≥–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–º–æ–∂–µ—Ç–µ –≤ –±–æ—Ç–µ —Ç–∏–º—ã")
        await bot.send_message(channel_id_zalet,"üßû‚Äç‚ôÇÔ∏è –í–æ—Ä–∫–µ—Ä: " + str(worker_ref) + " –∑–∞–Ω–µ—Å –Ω–∞–º –±–∞–±–∫–∏\nüí∞C—É–º–º–∞ –∑–∞–ª–µ—Ç–∞: " + str(price) + " —Ä—É–±–ª–µ–π\nüí∞–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞ " + str(plata_worker) + "")
    else:
        await bot.send_message(call.from_user.id, '‚ùé –ù–µ –±—ã–ª–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!')


###-------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

