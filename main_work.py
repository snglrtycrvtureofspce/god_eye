# -*- coding: utf-8 -*-
###------------------------------------------------------------------------------------------------–ë–∏–ª–∏–æ—Ç–µ–∫–∞
import io
import sys
import time
import random
import lxml
import requests
from bs4 import BeautifulSoup
import config
import logging
from contextlib import suppress
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import re
import os
from PIL import Image, ImageFilter, ImageDraw, ImageFont, ImageOps, ImageDraw2, ImageChops
from aiogram.types import InputFile, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import pandas
import vk_api
import json
import asyncio
import sqlite3
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,MessageToDeleteNotFound)
import traceback
import nest_asyncio
import datetime, threading, time
from pyqiwip2p import QiwiP2P
from pyqiwip2p.types import QiwiCustomer, QiwiDatetime
from datetime import timedelta, date
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
import warnings
###------------------------------------------------------------------------------------------------ DB
connect = sqlite3.connect('other/GlazIntim.db')
admin_panel = connect.cursor()
admin_panel.execute('CREATE TABLE IF NOT EXISTS admin_panel_info(number_code TEXT NOT NULL,token_vk_bot TEXT NOT NULL, full_price TEXT NOT NULL, vremen_price TEXT NOT NULL, number_qiwi TEXT NOT NULL, proxy_vk TEXT NOT NULL)')
###------------------------------------------------------------------------------------------------
workers = sqlite3.connect('other/worker.db')
user_workers = workers.cursor()
#user_workers.execute('CREATE TABLE IF NOT EXISTS user_workers(id_user INTEGER, time_register TEXT NOT NULL, status_active INTEGER, status_worker INTEGER, worker_referal INTEGER, balanse_worker FLOAT, qiwi_rekv_worker TEXT NOT NULL)')
##-----------------------------
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=config.token_bot_worker)
dp = Dispatcher(bot, storage=storage)
channel_id = config.channel_id
channel_id_zalet = config.channel_id_zalet
###--------------------------------

###------------------------------------------------------------------------------------------------ States
class Form(StatesGroup):
    vk_add = State()  # –†–∞–±–æ—Ç–∞ —Å –≤–∫
    insta_add = State()  # –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Å—Ç–æ–π
    telega_add = State()  # –†–∞–±–æ—Ç–∞ —Å —Ç–µ–ª–µ–≥–∞
    full_dostup_state = State()  # –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –æ–ø–ª–∞—Ç
    vremen_dostup_state = State()  # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    vk_token_add = State() # –ê–¥–º–∏–Ω–∫–∞
    qiwi_num_add = State()# –ê–¥–º–∏–Ω–∫–∞
    ful_adm = State()# –ê–¥–º–∏–Ω–∫–∞
    vrem_adm = State()# –ê–¥–º–∏–Ω–∫–∞
    proxy_adm = State()#–ê–¥–º–∏–Ω–∫–∞
    worker_add = State()#–ê–¥–º–∏–Ω–∫–∞
    worker_dell = State()#–ê–¥–º–∏–Ω–∫–∞
    update_worker_qiwi = State()#–û–±–Ω–æ–≤–∏—Ç—å –∫–∏–≤–∏
###------------------------------------------------------------------------------------------------ Keyboards
work_main = KeyboardButton('üë®üèº‚Äçüè´ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç')
info_main = KeyboardButton('üìóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
main = ReplyKeyboardMarkup(resize_keyboard=True)
main.row (work_main,info_main)
###------------ key
vk_inlain = InlineKeyboardButton('‚ô¶ùó©ùóû.ùóñùó¢ùó†', callback_data='vk_button')
telegram_inlain = InlineKeyboardButton('‚ô¶ùóßùóòùóüùóòùóöùó•ùóîùó†', callback_data='telegram_button')
insta_inlain = InlineKeyboardButton('‚ô¶ùóúùó°ùó¶ùóßùóîùóöùó•ùóîùó†', callback_data='insta_button')
inline_vibor = InlineKeyboardMarkup(resize_keyboard=True)
inline_vibor.add (vk_inlain)
inline_vibor.add (telegram_inlain)
inline_vibor.add (insta_inlain)
###------------ key
prov_oplat = KeyboardButton('üí∑  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É')
prov_oplat_back = KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
prov_oplat_but = ReplyKeyboardMarkup(resize_keyboard=True)
prov_oplat_but.add (prov_oplat)
prov_oplat_but.row (prov_oplat_back)
###------------ key
prov_oplat_back_main = KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
prov_oplat_but_but = ReplyKeyboardMarkup(resize_keyboard=True)
prov_oplat_but_but.row (prov_oplat_back_main)
###------------ key
back_main = KeyboardButton('üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
back_main_but = ReplyKeyboardMarkup(resize_keyboard=True)
back_main_but.add (back_main)
###------------ ADMIN
poisk_back_main = KeyboardButton('üëÅ –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å')
poisk_back_but = ReplyKeyboardMarkup(resize_keyboard=True)
poisk_back_but.add (poisk_back_main)
###------------
token_vk_admin = KeyboardButton('üëÅ –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫')
prox_admin = KeyboardButton('üëÅ –ü—Ä–æ–∫—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤–∫')
full_admin = KeyboardButton('üëÅ –¶–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
mai_admin = KeyboardButton('üëÅ –¶–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
add_worker = KeyboardButton('üëÅ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—É')
del_worker = KeyboardButton('üëÅ –°–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞')
admin_btn = ReplyKeyboardMarkup(resize_keyboard=True)
admin_btn.row (token_vk_admin,prox_admin)
admin_btn.row (full_admin,mai_admin)
admin_btn.row (add_worker, del_worker)
###--------------
###------------
add_work = KeyboardButton('üòå –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—É')
del_worker2 = KeyboardButton('üòå –°–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞')
moder_btn = ReplyKeyboardMarkup(resize_keyboard=True)
moder_btn.row (add_work )
moder_btn.row (del_worker2)
###--------------
poisk_back_main_vk = KeyboardButton('üîç –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å')
poisk_back_but_vk = ReplyKeyboardMarkup(resize_keyboard=True)
poisk_back_but_vk.add (poisk_back_main_vk)
###--------------
###------------------------------------------------------------------------------------------------ start
async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    datetime_user = date.today()
    user_workers.execute(f"SELECT id_user, status_worker FROM user_workers where id_user ={message.from_user.id}")
    db_worker = user_workers.fetchone()
    if db_worker == None:
        user_workers.execute(f"INSERT INTO user_workers VALUES ({message.from_user.id}, '{datetime_user}', 1, 1, 0, 0, 0)")
    else:
        pass
    workers.commit()
    img = open('temp/image_interface/work_menu_img.png', 'rb')
    await bot.send_photo(message.chat.id, img, caption='''üëë <strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!</strong>\n\nüíº –í—Å–µ –º–∞–Ω—É–∞–ª—ã –∏ –ø—Ä–æ—á–µ–µ —Å–æ–±—Ä–∞–Ω—ã –≤ <strong>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–æ—Ç–∞</strong>.\n\nüíº <strong>–°—É—Ç—å —Ä–∞–±–æ—Ç—ã: </strong>\n\n‚Äî–í –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏–º–µ–µ—Ç—Å—è –±–æ—Ç –ø–æ <strong>—Ñ–µ–π–∫-–ø–æ–∏—Å–∫—É –∏–Ω—Ç–∏–º–æ–∫üîû</strong>\n‚Äî–ß—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏–ª <strong>"–°–ª–∏–≤ –∏–Ω—Ç–∏–º–æ–∫ —á–µ–ª–æ–≤–µ–∫–∞"</strong>, –µ–º—É –Ω—É–∂–Ω–æ <strong>–æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.</strong>\n‚Äî–ë–æ—Ç –∏–º–µ–µ—Ç <strong>–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π.</strong>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ <strong>2022 –≥–æ–¥—É —Å—Ö–µ–º–∞ —Å–≤–µ–∂–∞—è</strong> –∏ —Ä–∞–∑–≤–µ—Å—Ç–∏ –º–∞–º–æ–Ω—Ç–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ.\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <strong>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞–º–æ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è</strong>.\n\n–ü—Ä–æ—à—É –∑–∞–º–µ—Ç–∏—Ç—å, –µ—Å–ª–∏ –≤—ã –±—ã–ª–∏ <strong>—Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</strong> –∏ –º–∞–º–æ–Ω—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, —Ç–æ –ø–æ—Å–ª–µ –∑–∞–ª–µ—Ç–∞ –º–∞–º–æ–Ω—Ç–∞ <strong>–≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –±–∞–ª–∞–Ω—Å</strong>, –Ω–æ —Å–Ω—è—Ç—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ, –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ <strong>–Ω–µ –≤–µ—Ä–Ω–µ—Ç–µ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å</strong>\n\n–ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –≤–∞—Å –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞''', parse_mode='HTML', reply_markup=main)

@dp.message_handler(commands=['admin'], user_id=int(config.Admin_id))
async def admin(message: types.Message):
    admin_register = config.Admin_id
    img = open('temp/image_interface/admin_img.png', 'rb')

    admin_panel.execute(f"SELECT number_code, token_vk_bot, full_price, vremen_price, number_qiwi FROM admin_panel_info where number_code={admin_register}")
    db_admin_panel = admin_panel.fetchone()
    connect.commit()
    s = requests.Session()
    s.proxies.update({'http': str(admin_panel.execute(f"SELECT proxy_vk, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])})
    token_vk = str(admin_panel.execute(f"SELECT token_vk_bot, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])
    vk_session = vk_api.VkApi(token=token_vk, session=s)
    try:
        vk = vk_session.get_api()
        status = vk_session.method("status.get", {"user_id": 1})
        vk_checker = "üü¢ Online"
    except:
        vk_checker = "üî¥ Offline (–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ª–∏–±–æ IP-–ü—Ä–æ–∫—Å–∏)"
    await bot.send_photo(message.chat.id, img, caption=f'üì± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞\n\nüîë–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–∫\nü¶ä–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {vk_checker}\nü¶ä–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–ø–∏—à–∏—Ç–µ /admin\n\nüë®‚Äçüíª –í–æ—Ä–∫–µ—Ä–æ–≤: {user_workers.execute(f"SELECT COUNT( * ) FROM  user_workers WHERE status_worker = 1").fetchone()[0]}\nüë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–∞–º –±–æ—Ç–µ –≤—Å–µ–≥–æ: {admin_panel.execute(f"SELECT COUNT( * ) FROM  user_intim").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ VK (–∂–µ–Ω—Å–∫–∏—Ö): {admin_panel.execute(f"SELECT COUNT( * ) FROM  vk_information").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ instagram: {admin_panel.execute(f"SELECT COUNT( * ) FROM  insta_information").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ telegram: {admin_panel.execute(f"SELECT COUNT( * ) FROM  telega_information").fetchone()[0]}\n\n–í –¥–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\nüëÅ–¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫\nüëÅ–¶–µ–Ω—ã –¥–æ—Å—Ç—É–ø–æ–≤\nüëÅ–ê—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã\–ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ —Å–Ω–æ–≤–∞ –∫ –±–æ—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ /start\n', parse_mode='HTML', reply_markup=admin_btn)
    pass

@dp.message_handler(commands=['moderator'], user_id=int(config.Moderator_id))
async def admin(message: types.Message):
    img = open('temp/image_interface/moder_img.png', 'rb')
    admin_panel.execute(f"SELECT number_code, token_vk_bot, full_price, vremen_price, number_qiwi FROM admin_panel_info where number_code={config.Admin_id}")
    db_admin_panel = admin_panel.fetchone()
    connect.commit()
    s = requests.Session()
    s.proxies.update({'http': str(admin_panel.execute(f"SELECT proxy_vk, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])})
    token_vk = str(admin_panel.execute(f"SELECT token_vk_bot, number_code FROM admin_panel_info where number_code=number_code").fetchone()[0])
    vk_session = vk_api.VkApi(token=token_vk, session=s)
    try:
        vk = vk_session.get_api()
        status = vk_session.method("status.get", {"user_id": 1})
        vk_checker = "üü¢ Online"
    except:
        vk_checker = "üî¥ Offline (–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ª–∏–±–æ IP-–ü—Ä–æ–∫—Å–∏)"
    await bot.send_photo(message.chat.id, img, caption=f'üì± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–¥–µ—Ä-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞\n\nüë®‚Äçüíª –í–æ—Ä–∫–µ—Ä–æ–≤: {user_workers.execute(f"SELECT COUNT( * ) FROM  user_workers WHERE status_worker = 1").fetchone()[0]}\nüë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–∞–º –±–æ—Ç–µ –≤—Å–µ–≥–æ: {admin_panel.execute(f"SELECT COUNT( * ) FROM  user_intim").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ VK (–∂–µ–Ω—Å–∫–∏—Ö): {admin_panel.execute(f"SELECT COUNT( * ) FROM  vk_information").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ instagram: {admin_panel.execute(f"SELECT COUNT( * ) FROM  insta_information").fetchone()[0]}\nüë®‚Äçüíª –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–∏–≤–æ–≤ telegram: {admin_panel.execute(f"SELECT COUNT( * ) FROM  telega_information").fetchone()[0]}\n\n–í –¥–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\nüëÅ–í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—É\nüëÅ–°–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ —Å–Ω–æ–≤–∞ –∫ –±–æ—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ /start\n', parse_mode='HTML', reply_markup=moder_btn)
    pass
###--------------------------------------------------------
@dp.message_handler(lambda message: message.text == "üëÅ –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫")
    await Form.vk_token_add.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—É", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å")
    await Form.worker_add.set()
    pass

@dp.message_handler(lambda message: message.text == "üòå –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—É", user_id=int(config.Moderator_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å")
    await Form.worker_add.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –°–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞", user_id=int(config.Moderator_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å")
    await Form.worker_dell.set()
    pass

@dp.message_handler(lambda message: message.text == "üòå –°–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞", user_id=int(config.Moderator_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å")
    await Form.worker_dell.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –ü—Ä–æ–∫—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤–∫", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∫—Å—é –¥–ª—è —Ç–æ–∫–µ–Ω–∞. –û–Ω–∞ –ø–æ—Å–ª—É–∂–∏—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏\n–ù—É–∂–µ–Ω —Ç–∏–ø - HTTP\n–ü—Ä–∏–º–µ—Ä: http://176.193.164.85:53281")
    await Form.proxy_adm.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ QiwiP2P", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ –∞—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Qiwi\n\n–ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å: https://qiwi.com/p2p-admin/transfers/api\n–õ–∏—Å—Ç–∞–µ—Ç–µ –≤ —Å–∞–º—ã–π –Ω–∏–∑ -> –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∫–ª—é—á–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å -> –í–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ª—é–±–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ -> –ü–æ–ª—É—á–∞–µ—Ç–µ –∫–æ–¥(–ò–º–µ–Ω–Ω–æ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤ –æ—Ä–∞–Ω–∂–µ–≤–æ–π —Ä–∞–º–æ—á–∫–µ)")
    await Form.qiwi_num_add.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –¶–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    await Form.ful_adm.set()
    pass

@dp.message_handler(lambda message: message.text == "üëÅ –¶–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞", user_id=int(config.Admin_id))
async def process_login(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await message.answer("üëÅ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    await Form.vrem_adm.set()
    pass
####--------------------------
@dp.message_handler(state=Form.vk_token_add)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vk_token_add'] = message.text
    await Form.next()
    info = data['vk_token_add']
    admin_panel.execute(f"UPDATE admin_panel_info SET token_vk_bot='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –í–ö —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=admin_btn)
    await state.finish()
    pass

@dp.message_handler(state=Form.worker_add)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['worker_add'] = message.text
    await Form.next()
    info = data['worker_add']
    user_workers.execute(f"UPDATE user_workers SET status_worker = '1' WHERE id_user = {info}")
    workers.commit()
    await message.answer(f'‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω')
    await state.finish()
    pass

@dp.message_handler(state=Form.worker_dell)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['worker_dell'] = message.text
    await Form.next()
    info = data['worker_dell']
    user_workers.execute(f"UPDATE user_workers SET status_worker = '0' WHERE id_user = {info}")
    workers.commit()
    await message.answer(f'‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω')
    await state.finish()
    pass

@dp.message_handler(state=Form.proxy_adm)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['proxy_adm'] = message.text
    await Form.next()
    info = data['proxy_adm']
    admin_panel.execute(f"UPDATE admin_panel_info SET proxy_vk='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –ü—Ä–æ–∫—Å—è –¥–ª—è –≤–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_btn)
    await state.finish()
    pass

@dp.message_handler(state=Form.qiwi_num_add)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['qiwi_num_add'] = message.text
    await Form.next()
    info = data['qiwi_num_add']
    admin_panel.execute(f"UPDATE admin_panel_info SET number_qiwi='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –ù–æ–≤—ã–π –∞—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä Qiwi –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=admin_btn)
    await state.finish()
    pass

@dp.message_handler(state=Form.ful_adm)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ful_adm'] = message.text
    await Form.next()
    info = data['ful_adm']
    admin_panel.execute(f"UPDATE admin_panel_info SET full_price='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –¶–µ–Ω–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_btn)
    await state.finish()
    pass
@dp.message_handler(state=Form.vrem_adm)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vrem_adm'] = message.text
    await Form.next()
    info = data['vrem_adm']
    admin_panel.execute(f"UPDATE admin_panel_info SET vremen_price='{info}' WHERE number_code={config.Admin_id}")
    connect.commit()
    await message.answer(f'‚úÖ –¶–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=admin_btn)
    await state.finish()
    pass

@dp.message_handler(lambda message: message.text == "üë®üèº‚Äçüè´ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç")
async def worker_profile(message: types.Message):
    vivod_balanse= InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å!',callback_data='vivod_balanse')
    update_qiwi_worker = InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π QIWI!',callback_data='update_qiwi_worker')
    workers_btn = InlineKeyboardMarkup(resize_keyboard=True)
    workers_btn.row(vivod_balanse,update_qiwi_worker)
    user_workers.execute(f"SELECT id_user, status_worker FROM user_workers where status_worker = 0 AND id_user = {message.from_user.id}")
    db_worker = user_workers.fetchone()
    if db_worker == None:
        img = open('temp/image_interface/my_profile.png', 'rb')

        adres = str(config.AdressBot)
        worker_url = adres.replace("@", "")
        await bot.send_photo(message.chat.id, img, caption=f'''üíª<strong>–ü—Ä–æ—Ñ–∏–ª—å –≤–æ—Ä–∫–µ—Ä–∞</strong>\n\n<strong>üí≥–í–∞—à –±–∞–ª–∞–Ω—Å:</strong> {user_workers.execute(f"SELECT balanse_worker, id_user FROM user_workers WHERE id_user = {message.from_user.id}").fetchone()[0]}‚ÇΩ\n<strong>ü¶£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –º–∞–º–æ–Ω—Ç–æ–≤:</strong> {user_workers.execute(f"SELECT count (*) FROM user_workers WHERE worker_referal = {message.from_user.id}").fetchone()[0]} —à—Ç.\n\n<strong>‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</strong> '''+config.AdressBot+''' –∏ –Ω–∞–∂–∞—Ç—å <strong>"–°—Ç–∞—Ä—Ç"</strong>\n\n<strong>üíé –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å:</strong>\n<strong>üíª–í–∞—à ID:</strong>'''+str(message.from_user.id)+'''\n\n<strong>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</strong> <code>https://t.me/''' + str(worker_url) + '''?start=''' + str(message.from_user.id) + '''</code>\n\nüí∞ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –º–∞–º–æ–Ω—Ç–æ–≤ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –≤ –±–æ—Ç–∞ –∏ –∑–∞—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ <strong>–ª—é–±—ã–º –æ–±—Ä–∞–∑–æ–º –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</strong>\n\nü•≥ –í—Å–µ –∑–∞–ª–µ—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ -'''+ str(config.zalet_adress), parse_mode='HTML', reply_markup=workers_btn)
        pass
    else:
        await message.answer('–í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏')
        pass

@dp.message_handler(lambda message: message.text == "üìóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def worker_profile(message: types.Message):
    user_workers.execute(f"SELECT id_user, status_worker FROM user_workers where status_worker = 0 AND id_user = {message.from_user.id}")
    db_worker = user_workers.fetchone()
    if db_worker == None:
        img = open('temp/image_interface/info_img.png', 'rb')
        adres = str(config.AdressBot)
        await bot.send_photo(message.chat.id, img, caption=f'''üíà <strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª!</strong>\n\nüéÄ –ú–∞–Ω—É–∞–ª - '''+str(config.manual)+'''\n\n‚îî–°–≤—è–∑—å —Å –ê–¥–º–∏–Ω–æ–º: '''+str(config.call_admin)+'''\n‚îî–°–≤—è–∑—å —Å –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: '''+str(config.call_moder)+'''\n\nüíà –ù–∏–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞.\n‚îîüëä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: <strong>'''+str(user_workers.execute(f"SELECT COUNT( * ) FROM  user_workers WHERE status_worker = 1").fetchone()[0])+'''</strong>\n‚îî ‚úåÔ∏è–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–∞—Ö: <strong>'''+str(user_workers.execute(f"SELECT COUNT( * ) FROM  user_workers").fetchone()[0])+'''</strong>''', parse_mode='HTML')
        pass
    else:
        await message.answer('–í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏')
        pass

@dp.callback_query_handler(text='update_qiwi_worker')
async def process_callback_vivod_balanse(callback_query: types.CallbackQuery):
    img = open('temp/image_interface/update_rekvi_work.png', 'rb')
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer_photo(photo=img,caption=f'üîπ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ QIWI —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\nüì±–£–∫–∞–∑—ã–≤–∞—Ç—å –Ω—É–∂–Ω–æ –≤–∞—à –Ω–æ–º–µ—Ä\nüìù–ù–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞')
    await Form.update_worker_qiwi.set()

@dp.callback_query_handler(text='vivod_balanse')
async def process_callback_vivod_balanse(callback_query: types.CallbackQuery):
    img = open('temp/image_interface/vivod_balanse_worker.png', 'rb')
    await bot.answer_callback_query(callback_query.id)
    zero_balanse = user_workers.execute(f"SELECT balanse_worker, id_user FROM user_workers where id_user = {callback_query.from_user.id}").fetchone()[0]
    if zero_balanse == 0:
        await callback_query.message.answer_photo(photo=img, caption=f'ü•∫–£–≤–∞–∂–∞–µ–º—ã–π –≤–æ—Ä–∫–µ—Ä, —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ 0 —Ä—É–±–ª–µ–π.', parse_mode='HTML', reply_markup=main)
    else:
        balanse_vivod = user_workers.execute(f"SELECT balanse_worker, id_user FROM user_workers where id_user = {callback_query.from_user.id}").fetchone()[0]
        num_qiwi_worker = user_workers.execute(f"SELECT qiwi_rekv_worker, id_user FROM user_workers where id_user = {callback_query.from_user.id}").fetchone()[0]
        user_workers.execute(f"UPDATE user_workers SET balanse_worker='0.0' WHERE id_user={callback_query.from_user.id}")
        workers.commit()
        await callback_query.message.answer_photo(photo=img, caption=f'üí≥ –í–µ—Å—å –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n\n–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø–∏—à–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ª–∏–±–æ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É',parse_mode='HTML', reply_markup=main)
        await bot.send_message(channel_id,f"üí≥–í–æ—Ä–∫–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥\nID –≤–æ—Ä–∫–µ—Ä–∞ " + str(callback_query.from_user.id) + "\n\nQiwi –Ω–æ–º–µ—Ä:"+str(num_qiwi_worker)+"\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: "+str(balanse_vivod)+" —Ä—É–±–ª–µ–π")

@dp.message_handler(state=Form.update_worker_qiwi)
async def register_vk_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['update_worker_qiwi'] = message.text
    await Form.next()
    info = data['update_worker_qiwi']
    user_workers.execute(f"UPDATE user_workers SET qiwi_rekv_worker='{info}' WHERE id_user={message.from_user.id}")
    workers.commit()
    await message.answer(f'‚úÖ –†–µ–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ –∫–∏–≤–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=main)
    await state.finish()
    pass

###-------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

